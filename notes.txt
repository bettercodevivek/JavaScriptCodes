javascript accepts both single quotes as well as double quotes in getElementById and others.
In js, you can use it to even change src of img by using onclick only.
similarly like we changed innerHTMl of para.
In HTML, JavaScript code is inserted between <script> and </script> tags.
Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.
Placing scripts at the bottom of the <body> element improves the display speed, 
because script interpretation slows down the display.

JavaScript can "display" data in different ways:
1.Writing into an HTML element, using innerHTML.
2.Writing into the HTML output using document.write().
3.Writing into an alert box, using window.alert().
4.Writing into the browser console, using console.log().

Using document.write() after an HTML document is loaded, will delete all existing HTML( basically
,normally when you use document.write() toh kuch change  nahi hoga but when you create a button which onclick 
triggers the document.write() in that case existing HTML gets deleted)

JavaScript does not have any print object or print methods.
You cannot access output devices from JavaScript.
The only exception is that you can call the window.print() method in the browser to print the content of the current window.

The var keyword was used in all JavaScript code from 1995 to 2015.
The let and const keywords were added to JavaScript in 2015.
The var keyword should only be used in code written for older browsers.

Variables declared with let have Block Scope
Variables declared with let must be Declared before use
Variables declared with let cannot be Redeclared in the same scope

let and const have block scope.

let and const can not be redeclared.

let and const must be declared before use.

let and const does not bind to this.

let and const are not hoisted.

Accessing a function with incorrect parameters can return an incorrect answer:
Accessing a function without () returns the function and not the function result:

In JavaScript, the this keyword refers to an object.

Which object depends on how this is being invoked (used or called).

The this keyword refers to different objects depending on how it is used:

In an object method, this refers to the object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), apply(), and bind() can refer this to any object.

VERY IMP. POINT=> When a JavaScript variable is declared with the keyword "new", the variable is created as an object:

An HTML event can be something the browser does, or something a user does.

Here is a list of some common HTML events:

Event	    Description
onchange --	An HTML element has been changed
onclick	  --  The user clicks an HTML element
onmouseover--	The user moves the mouse over an HTML element
onmouseout--	The user moves the mouse away from an HTML element
onkeydown--	The user pushes a keyboard key
onload	--    The browser has finished loading the page

Strings are immutable: Strings cannot be changed, only replaced.

The trim() method removes whitespace from both sides of a string:
ECMAScript 2019 added the String method trimStart() to JavaScript.
The trimStart() method works like trim(), but removes whitespace only from the start of a string
similarly we have trimEnd()
The repeat() method returns a string with a number of copies of a string.

The repeat() method returns a new string.

The repeat() method does not change the original string.

Automatic replacing of expressions with real values is called string interpolation.

These number methods can be used on all JavaScript numbers:

Method	         Description
toString()	     Returns a number as a string
toExponential()	 Returns a number written in exponential notation
toFixed()	     Returns a number written with a number of decimals
toPrecision()	 Returns a number written with a specified length
ValueOf()	     Returns a number as a number

The Date() method returns the number of milliseconds since 1.1.1970.

parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:

parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:

Property	     Description
EPSILON	            The difference between 1 and the smallest number > 1.
MAX_VALUE	        The largest number possible in JavaScript
MIN_VALUE	        The smallest number possible in JavaScript
MAX_SAFE_INTEGER	The maximum safe integer (253 - 1)
MIN_SAFE_INTEGER	The minimum safe integer -(253 - 1)
POSITIVE_INFINITY	Infinity (returned on overflow)
NEGATIVE_INFINITY	Negative infinity (returned on overflow)
NaN	                A "Not-a-Number" value

Many languages allows negative bracket indexing like [-1] to access elements from the end of an object / array / string.
This is not possible in JavaScript, because [] is used for accessing both arrays and objects. obj[-1] refers to the value of key -1,
not to the last property of the object.
The at() method was introduced in ES2022 to solve this problem.

The map() method creates a new array by performing a function on each array element.

The map() method does not execute the function for array elements without values.

The map() method does not change the original array.